[
  {
    "CVE_id": "2019-1551",
    "is_manual": 0,
    "CWE_id": "190",
    "vul_type": [
      "Overflow"
    ],
    "file_paths": [
      "crypto/bn/asm/rsaz-x86_64.pl"
    ],
    "affected_vers": [
      "1.1.1-1.1.1d",
      "1.0.2-1.0.2t"
    ],
    "fixed_vers": [
      "1.1.1e",
      "1.0.2u"
    ],
    "vul_func": [],
    "vul_desc": "There is an overflow bug in the x64_64 Montgomery squaring procedure used in exponentiation with 512-bit moduli. No EC algorithms are affected. Analysis suggests that attacks against 2-prime RSA1024, 3-prime RSA1536, and DSA1024 as a result of this defect would be very difficult to perform and are not believed likely. Attacks against DH512 are considered just feasible. However, for an attack the target would have to re-use the DH512 private key, which is not recommended anyway. Also applications directly using the low level API BN_mod_exp may be affected if they use BN_FLG_CONSTTIME. Fixed in OpenSSL 1.1.1e (Affected 1.1.1-1.1.1d). Fixed in OpenSSL 1.0.2u (Affected 1.0.2-1.0.2t)."
  },
  {
    "CVE_id": "2020-1967",
    "is_manual": 0,
    "CWE_id": "476",
    "vul_type": [
      "DoS"
    ],
    "file_paths": [
      "ssl/t1_lib.c"
    ],
    "affected_vers": [
      "1.1.1d-1.1.1f"
    ],
    "fixed_vers": [
      "1.1.1g"
    ],
    "vul_func": [
      "SSL_check_chain"
    ],
    "vul_desc": "Server or client applications that call the SSL_check_chain() function during or after a TLS 1.3 handshake may crash due to a NULL pointer dereference as a result of incorrect handling of the \"signature_algorithms_cert\" TLS extension. The crash occurs if an invalid or unrecognised signature algorithm is received from the peer. This could be exploited by a malicious peer in a Denial of Service attack. OpenSSL version 1.1.1d, 1.1.1e, and 1.1.1f are affected by this issue. This issue did not affect OpenSSL versions prior to 1.1.1d. Fixed in OpenSSL 1.1.1g (Affected 1.1.1d-1.1.1f)."
  },
  {
    "CVE_id": "2019-1549",
    "is_manual": 0,
    "CWE_id": "330",
    "vul_type": [],
    "file_paths": [
      "crypto/include/internal/rand_int.h",
      "crypto/init.c",
      "crypto/rand/drbg_lib.c",
      "crypto/rand/rand_lcl.h",
      "crypto/rand/rand_lib.c",
      "crypto/threads_none.c",
      "crypto/threads_pthread.c",
      "crypto/threads_win.c",
      "include/internal/cryptlib.h",
      "test/drbgtest.c"
    ],
    "affected_vers": [
      "1.1.1-1.1.1c"
    ],
    "fixed_vers": [
      "1.1.1d"
    ],
    "vul_func": [],
    "vul_desc": "OpenSSL 1.1.1 introduced a rewritten random number generator (RNG). This was intended to include protection in the event of a fork() system call in order to ensure that the parent and child processes did not share the same RNG state. However this protection was not being used in the default case. A partial mitigation for this issue is that the output from a high precision timer is mixed into the RNG state so the likelihood of a parent and child process sharing state is significantly reduced. If an application already calls OPENSSL_init_crypto() explicitly using OPENSSL_INIT_ATFORK then this problem does not occur at all. Fixed in OpenSSL 1.1.1d (Affected 1.1.1-1.1.1c)."
  },
  {
    "CVE_id": "2018-0734",
    "is_manual": 1,
    "CWE_id": "327",
    "vul_type": [
      "timing SCA"
    ],
    "file_paths": [
      "crypto/dsa/dsa_ossl.c"
    ],
    "affected_vers": [
      "1.1.1",
      "1.1.0-1.1.0i",
      "1.0.2-1.0.2p"
    ],
    "fixed_vers": [
      "1.1.1a",
      "1.1.0j",
      "1.0.2q"
    ],
    "vul_func": [
      "dsa_sign_setup"
    ],
    "sensitive_line": 250,
    "keywords": [
      "BN"
    ],
    "vul_desc": "The OpenSSL DSA signature algorithm has been shown to be vulnerable to a timing side channel attack. An attacker could use variations in the signing algorithm to recover the private key. Fixed in OpenSSL 1.1.1a (Affected 1.1.1). Fixed in OpenSSL 1.1.0j (Affected 1.1.0-1.1.0i). Fixed in OpenSSL 1.0.2q (Affected 1.0.2-1.0.2p)."
  },
  {
    "CVE_id": "2018-0739",
    "is_manual": 0,
    "CWE_id": "674",
    "vul_type": [
      "DoS"
    ],
    "file_paths": [
      "crypto/asn1/asn1.h",
      "crypto/asn1/asn1_err.c",
      "crypto/asn1/tasn_dec.c"
    ],
    "affected_vers": [
      "1.1.0-1.1.0g",
      "1.0.2b-1.0.2n"
    ],
    "fixed_vers": [
      "1.1.0h",
      "1.0.2o"
    ],
    "vul_func": [],
    "vul_desc": "Constructed ASN.1 types with a recursive definition (such as can be found in PKCS7) could eventually exceed the stack given malicious input with excessive recursion. This could result in a Denial Of Service attack. There are no such structures used within SSL/TLS that come from untrusted sources so this is considered safe. Fixed in OpenSSL 1.1.0h (Affected 1.1.0-1.1.0g). Fixed in OpenSSL 1.0.2o (Affected 1.0.2b-1.0.2n)."
  },
  {
    "CVE_id": "2019-1543",
    "is_manual": 0,
    "CWE_id": "327",
    "vul_type": [],
    "file_paths": [
      "crypto/evp/e_chacha20_poly1305.c"
    ],
    "affected_vers": [
      "1.1.1-1.1.1b",
      "1.1.0-1.1.0j"
    ],
    "fixed_vers": [
      "1.1.1c",
      "1.1.0k"
    ],
    "vul_func": [],
    "vul_desc": "ChaCha20-Poly1305 is an AEAD cipher, and requires a unique nonce input for every encryption operation. RFC 7539 specifies that the nonce value (IV) should be 96 bits (12 bytes). OpenSSL allows a variable nonce length and front pads the nonce with 0 bytes if it is less than 12 bytes. However it also incorrectly allows a nonce to be set of up to 16 bytes. In this case only the last 12 bytes are significant and any additional leading bytes are ignored. It is a requirement of using this cipher that nonce values are unique. Messages encrypted using a reused nonce value are susceptible to serious confidentiality and integrity attacks. If an application changes the default nonce length to be longer than 12 bytes and then makes a change to the leading bytes of the nonce expecting the new value to be a new unique nonce then such an application could inadvertently encrypt messages with a reused nonce. Additionally the ignored bytes in a long nonce are not covered by the integrity guarantee of this cipher. Any application that relies on the integrity of these ignored leading bytes of a long nonce may be further affected. Any OpenSSL internal use of this cipher, including in SSL/TLS, is safe because no such use sets such a long nonce value. However user applications that use this cipher directly and set a non-default nonce length to be longer than 12 bytes may be vulnerable. OpenSSL versions 1.1.1 and 1.1.0 are affected by this issue. Due to the limited scope of affected deployments this has been assessed as low severity and therefore we are not creating new releases at this time. Fixed in OpenSSL 1.1.1c (Affected 1.1.1-1.1.1b). Fixed in OpenSSL 1.1.0k (Affected 1.1.0-1.1.0j)."
  },
  {
    "CVE_id": "2018-0737",
    "is_manual": 0,
    "CWE_id": "327",
    "vul_type": [],
    "file_paths": [
      "crypto/rsa/rsa_gen.c"
    ],
    "affected_vers": [],
    "fixed_vers": [],
    "vul_func": [],
    "vul_desc": "The OpenSSL RSA Key generation algorithm has been shown to be vulnerable to a cache timing side channel attack. An attacker with sufficient access to mount cache timing attacks during the RSA key generation process could recover the private key. Fixed in OpenSSL 1.1.0i-dev (Affected 1.1.0-1.1.0h). Fixed in OpenSSL 1.0.2p-dev (Affected 1.0.2b-1.0.2o)."
  },
  {
    "CVE_id": "2018-0733",
    "is_manual": 0,
    "CWE_id": "",
    "vul_type": [],
    "file_paths": [
      "crypto/pariscid.pl"
    ],
    "affected_vers": [
      "1.1.0-1.1.0g"
    ],
    "fixed_vers": [
      "1.1.0h"
    ],
    "vul_func": [
      "CRYPTO_memcmp"
    ],
    "vul_desc": "Because of an implementation bug the PA-RISC CRYPTO_memcmp function is effectively reduced to only comparing the least significant bit of each byte. This allows an attacker to forge messages that would be considered as authenticated in an amount of tries lower than that guaranteed by the security claims of the scheme. The module can only be compiled by the HP-UX assembler, so that only HP-UX PA-RISC targets are affected. Fixed in OpenSSL 1.1.0h (Affected 1.1.0-1.1.0g)."
  },
  {
    "CVE_id": "2018-0732",
    "is_manual": 0,
    "CWE_id": "320",
    "vul_type": [
      "DoS"
    ],
    "file_paths": [
      "crypto/dh/dh_key.c"
    ],
    "affected_vers": [],
    "fixed_vers": [],
    "vul_func": [],
    "vul_desc": "During key agreement in a TLS handshake using a DH(E) based ciphersuite a malicious server can send a very large prime value to the client. This will cause the client to spend an unreasonably long period of time generating a key for this prime resulting in a hang until the client has finished. This could be exploited in a Denial Of Service attack. Fixed in OpenSSL 1.1.0i-dev (Affected 1.1.0-1.1.0h). Fixed in OpenSSL 1.0.2p-dev (Affected 1.0.2-1.0.2o)."
  },
  {
    "CVE_id": "2018-0735",
    "is_manual": 0,
    "CWE_id": "327",
    "vul_type": [],
    "file_paths": [
      "crypto/ec/ec_mult.c"
    ],
    "affected_vers": [
      "1.1.0-1.1.0i",
      "1.1.1"
    ],
    "fixed_vers": [
      "1.1.0j",
      "1.1.1a"
    ],
    "vul_func": [],
    "vul_desc": "The OpenSSL ECDSA signature algorithm has been shown to be vulnerable to a timing side channel attack. An attacker could use variations in the signing algorithm to recover the private key. Fixed in OpenSSL 1.1.0j (Affected 1.1.0-1.1.0i). Fixed in OpenSSL 1.1.1a (Affected 1.1.1)."
  },
  {
    "CVE_id": "2021-3449",
    "is_manual": 0,
    "CWE_id": "476",
    "vul_type": [
      "DoS"
    ],
    "file_paths": [
      "ssl/statem/extensions.c"
    ],
    "affected_vers": [
      "1.1.1-1.1.1j"
    ],
    "fixed_vers": [
      "1.1.1k"
    ],
    "vul_func": [],
    "vul_desc": "An OpenSSL TLS server may crash if sent a maliciously crafted renegotiation ClientHello message from a client. If a TLSv1.2 renegotiation ClientHello omits the signature_algorithms extension (where it was present in the initial ClientHello), but includes a signature_algorithms_cert extension then a NULL pointer dereference will result, leading to a crash and a denial of service attack. A server is only vulnerable if it has TLSv1.2 and renegotiation enabled (which is the default configuration). OpenSSL TLS clients are not impacted by this issue. All OpenSSL 1.1.1 versions are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1-1.1.1j)."
  },
  {
    "CVE_id": "2021-4044",
    "is_manual": 0,
    "CWE_id": "835",
    "vul_type": [],
    "file_paths": [
      "ssl/ssl_cert.c",
      "ssl/statem/statem_clnt.c"
    ],
    "affected_vers": [
      "3.0.0"
    ],
    "fixed_vers": [
      "3.0.1"
    ],
    "vul_func": [
      "IO",
      "That"
    ],
    "vul_desc": "Internally libssl in OpenSSL calls X509_verify_cert() on the client side to verify a certificate supplied by a server. That function may return a negative return value to indicate an internal error (for example out of memory). Such a negative return value is mishandled by OpenSSL and will cause an IO function (such as SSL_connect() or SSL_do_handshake()) to not indicate success and a subsequent call to SSL_get_error() to return the value SSL_ERROR_WANT_RETRY_VERIFY. This return value is only supposed to be returned by OpenSSL if the application has previously called SSL_CTX_set_cert_verify_callback(). Since most applications do not do this the SSL_ERROR_WANT_RETRY_VERIFY return value from SSL_get_error() will be totally unexpected and applications may not behave correctly as a result. The exact behaviour will depend on the application but it could result in crashes, infinite loops or other similar incorrect responses. This issue is made more serious in combination with a separate bug in OpenSSL 3.0 that will cause X509_verify_cert() to indicate an internal error when processing a certificate chain. This will occur where a certificate does not include the Subject Alternative Name extension but where a Certificate Authority has enforced name constraints. This issue can occur even with valid chains. By combining the two issues an attacker could induce incorrect, application dependent behaviour. Fixed in OpenSSL 3.0.1 (Affected 3.0.0)."
  },
  {
    "CVE_id": "2021-23840",
    "is_manual": 0,
    "CWE_id": "190",
    "vul_type": [
      "Overflow"
    ],
    "file_paths": [
      "crypto/err/openssl.txt",
      "crypto/evp/evp_enc.c",
      "crypto/evp/evp_err.c",
      "include/openssl/evperr.h"
    ],
    "affected_vers": [
      "1.1.1-1.1.1i",
      "1.0.2-1.0.2x"
    ],
    "fixed_vers": [
      "1.1.1j",
      "1.0.2y"
    ],
    "vul_func": [
      "the"
    ],
    "vul_desc": "Calls to EVP_CipherUpdate, EVP_EncryptUpdate and EVP_DecryptUpdate may overflow the output length argument in some cases where the input length is close to the maximum permissable length for an integer on the platform. In such cases the return value from the function call will be 1 (indicating success), but the output length value will be negative. This could cause applications to behave incorrectly or crash. OpenSSL versions 1.1.1i and below are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1j. OpenSSL versions 1.0.2x and below are affected by this issue. However OpenSSL 1.0.2 is out of support and no longer receiving public updates. Premium support customers of OpenSSL 1.0.2 should upgrade to 1.0.2y. Other users should upgrade to 1.1.1j. Fixed in OpenSSL 1.1.1j (Affected 1.1.1-1.1.1i). Fixed in OpenSSL 1.0.2y (Affected 1.0.2-1.0.2x)."
  },
  {
    "CVE_id": "2021-3711",
    "is_manual": 0,
    "CWE_id": "120",
    "vul_type": [
      "Overflow"
    ],
    "file_paths": [
      "crypto/sm2/sm2_crypt.c",
      "crypto/sm2/sm2_pmeth.c",
      "include/crypto/sm2.h",
      "test/sm2_internal_test.c"
    ],
    "affected_vers": [
      "1.1.1-1.1.1k"
    ],
    "fixed_vers": [
      "1.1.1l"
    ],
    "vul_func": [
      "API",
      "this"
    ],
    "vul_desc": "In order to decrypt SM2 encrypted data an application is expected to call the API function EVP_PKEY_decrypt(). Typically an application will call this function twice. The first time, on entry, the \"out\" parameter can be NULL and, on exit, the \"outlen\" parameter is populated with the buffer size required to hold the decrypted plaintext. The application can then allocate a sufficiently sized buffer and call EVP_PKEY_decrypt() again, but this time passing a non-NULL value for the \"out\" parameter. A bug in the implementation of the SM2 decryption code means that the calculation of the buffer size required to hold the plaintext returned by the first call to EVP_PKEY_decrypt() can be smaller than the actual size required by the second call. This can lead to a buffer overflow when EVP_PKEY_decrypt() is called by the application a second time with a buffer that is too small. A malicious attacker who is able present SM2 content for decryption to an application could cause attacker chosen data to overflow the buffer by up to a maximum of 62 bytes altering the contents of other data held after the buffer, possibly changing application behaviour or causing the application to crash. The location of the buffer is application dependent but is typically heap allocated. Fixed in OpenSSL 1.1.1l (Affected 1.1.1-1.1.1k)."
  },
  {
    "CVE_id": "2021-3450",
    "is_manual": 1,
    "CWE_id": "295",
    "vul_type": [
      "Bypass"
    ],
    "file_paths": [
      "crypto/x509/x509_vfy.c"
    ],
    "affected_vers": [
      "1.1.1h-1.1.1j"
    ],
    "fixed_vers": [
      "1.1.1k"
    ],
    "vul_func": [
      "check_chain_extensions"
    ],
    "sensitive_line": 527,
    "keywords": [],
    "vul_desc": "The X509_V_FLAG_X509_STRICT flag enables additional security checks of the certificates present in a certificate chain. It is not set by default. Starting from OpenSSL version 1.1.1h a check to disallow certificates in the chain that have explicitly encoded elliptic curve parameters was added as an additional strict check. An error in the implementation of this check meant that the result of a previous check to confirm that certificates in the chain are valid CA certificates was overwritten. This effectively bypasses the check that non-CA certificates must not be able to issue other certificates. If a \"purpose\" has been configured then there is a subsequent opportunity for checks that the certificate is a valid CA. All of the named \"purpose\" values implemented in libcrypto perform this check. Therefore, where a purpose is set the certificate chain will still be rejected even when the strict flag has been used. A purpose is set by default in libssl client and server certificate verification routines, but it can be overridden or removed by an application. In order to be affected, an application must explicitly set the X509_V_FLAG_X509_STRICT verification flag and either not set a purpose for the certificate verification or, in the case of TLS client or server applications, override the default purpose. OpenSSL versions 1.1.1h and newer are affected by this issue. Users of these versions should upgrade to OpenSSL 1.1.1k. OpenSSL 1.0.2 is not impacted by this issue. Fixed in OpenSSL 1.1.1k (Affected 1.1.1h-1.1.1j)."
  },
  {
    "CVE_id": "2022-0778",
    "is_manual": 1,
    "CWE_id": "835",
    "vul_type": [
      "DoS"
    ],
    "file_paths": [
      "crypto/bn/bn_sqrt.c"
    ],
    "affected_vers": [
      "3.0.0,3.0.1",
      "1.1.1-1.1.1m",
      "1.0.2-1.0.2zc"
    ],
    "fixed_vers": [
      "3.0.2",
      "1.1.1n",
      "1.0.2zd"
    ],
    "vul_func": [
      "BN_mod_sqrt"
    ],
    "sensitive_line": 306,
    "keywords": [
      "BN"
    ],
    "vul_desc": "The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. Internally this function is used when parsing certificates that contain elliptic curve public keys in compressed form or explicit elliptic curve parameters with a base point encoded in compressed form. It is possible to trigger the infinite loop by crafting a certificate that has invalid explicit curve parameters. Since certificate parsing happens prior to verification of the certificate signature, any process that parses an externally supplied certificate may thus be subject to a denial of service attack. The infinite loop can also be reached when parsing crafted private keys as they can contain explicit elliptic curve parameters. Thus vulnerable situations include: - TLS clients consuming server certificates - TLS servers consuming client certificates - Hosting providers taking certificates or private keys from customers - Certificate authorities parsing certification requests from subscribers - Anything else which parses ASN.1 elliptic curve parameters Also any other applications that use the BN_mod_sqrt() where the attacker can control the parameter values are vulnerable to this DoS issue. In the OpenSSL 1.0.2 version the public key is not parsed during initial parsing of the certificate which makes it slightly harder to trigger the infinite loop. However any operation which requires the public key from the certificate will trigger the infinite loop. In particular the attacker can use a self-signed certificate to trigger the loop during verification of the certificate signature. This issue affects OpenSSL versions 1.0.2, 1.1.1 and 3.0. It was addressed in the releases of 1.1.1n and 3.0.2 on the 15th March 2022. Fixed in OpenSSL 3.0.2 (Affected 3.0.0,3.0.1). Fixed in OpenSSL 1.1.1n (Affected 1.1.1-1.1.1m). Fixed in OpenSSL 1.0.2zd (Affected 1.0.2-1.0.2zc)."
  }
]